// <auto-generated />
using System;
using GameSetBook.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameSetBook.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Booking identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BookedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time booking is created");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the booking");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Client identifier");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Client's name");

                    b.Property<int>("CourtId")
                        .HasColumnType("int")
                        .HasComment("Court identifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Deleted on date and time");

                    b.Property<int>("Hour")
                        .HasColumnType("int")
                        .HasComment("Hour of the booking");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("is the the booking available");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("is the booking canceled");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Client's phone number");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Booking price");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CourtId");

                    b.ToTable("Bookings", (string)null);

                    b.HasComment("Booking entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookedOn = new DateTime(2024, 3, 9, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 3, 14, 17, 9, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "83544abd-e9e2-4592-ad5e-23cd2f63e5a0",
                            ClientName = "Petar Atanasov",
                            CourtId = 1,
                            Hour = 17,
                            IsAvailable = false,
                            IsDeleted = false,
                            PhoneNumber = "+359000111",
                            Price = 20.00m
                        });
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("City identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasComment("Country identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("City name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", (string)null);

                    b.HasComment("City entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Name = "Bucharest"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            Name = "Constanta"
                        });
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Club identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Address of the club");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasComment("Club's city identifier");

                    b.Property<string>("ClubOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Deleted on date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Club description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Club's email");

                    b.Property<bool>("HasParking")
                        .HasColumnType("bit")
                        .HasComment("Is car parking for clients available");

                    b.Property<bool>("HasShop")
                        .HasColumnType("bit")
                        .HasComment("Is tennis shop available");

                    b.Property<bool>("HasShower")
                        .HasColumnType("bit")
                        .HasComment("Is shower for clients available");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Is the club active");

                    b.Property<bool>("IsAproovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Is the club aprooved from app admin");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("IsDeleted the record deleted");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComment("Club's logo Url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Club name");

                    b.Property<int?>("NumberOfCoaches")
                        .HasColumnType("int")
                        .HasComment("Number of coaches in the club");

                    b.Property<int>("NumberOfCourts")
                        .HasColumnType("int")
                        .HasComment("Numbber of courts in the club");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Club's phone number");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the club has been created");

                    b.Property<int>("WorkingTimeEnd")
                        .HasColumnType("int")
                        .HasComment("Club working time end");

                    b.Property<int>("WorkingTimeStart")
                        .HasColumnType("int")
                        .HasComment("Club working time start");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClubOwnerId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clubs", (string)null);

                    b.HasComment("Club entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "First Club Address",
                            CityId = 1,
                            ClubOwnerId = "82cd50ca-b023-42e5-8344-227d5c45877c",
                            Description = "First Club Description",
                            Email = "firstClub@mail.com",
                            HasParking = true,
                            HasShop = true,
                            HasShower = true,
                            IsActive = true,
                            IsAproovedByAdmin = true,
                            IsDeleted = false,
                            LogoUrl = "",
                            Name = "First Club",
                            NumberOfCoaches = 2,
                            NumberOfCourts = 2,
                            PhoneNumber = "+359123456",
                            RegisteredOn = new DateTime(2024, 9, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 20,
                            WorkingTimeStart = 8
                        });
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.ClubReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Review identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasComment("Current review's club identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Review description");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasComment("Review rating");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Current review's reviewer identifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Review title");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("ClubReviews", (string)null);

                    b.HasComment("Club's review entity");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Country identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)")
                        .HasComment("Country name");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);

                    b.HasComment("Country entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Romania"
                        });
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Court identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasComment("Club identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Is the court enable");

                    b.Property<bool>("IsIndoor")
                        .HasColumnType("bit")
                        .HasComment("Is the court indoor");

                    b.Property<bool>("IsLighted")
                        .HasColumnType("bit")
                        .HasComment("Is the court lighted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Court name");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price for renting court per one hour");

                    b.Property<int>("Surface")
                        .HasColumnType("int")
                        .HasComment("Court name");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Courts", (string)null);

                    b.HasComment("Court entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClubId = 1,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = false,
                            Name = "No.1",
                            PricePerHour = 20m,
                            Surface = 3
                        },
                        new
                        {
                            Id = 2,
                            ClubId = 1,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = false,
                            Name = "No.2",
                            PricePerHour = 20m,
                            Surface = 2
                        });
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.GameSetMatchUpPlayerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Profile identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasComment("User's city");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Deleted on date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("User first name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("IsDeleted the record deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("User last name");

                    b.Property<int>("PlayStyle")
                        .HasColumnType("int")
                        .HasComment("Player's level");

                    b.Property<string>("PlayerDescription")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Player description");

                    b.Property<int>("PlayerLevel")
                        .HasColumnType("int")
                        .HasComment("Player's level");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComment("Url reference to the profile image");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("GameSetMatchUpPlayerProfiles", (string)null);

                    b.HasComment("GameSetMatchUp player profile entity");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Message identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Message content");

                    b.Property<bool>("Read")
                        .HasColumnType("bit")
                        .HasComment("Is the the message read");

                    b.Property<int>("ReceiverProfileId")
                        .HasColumnType("int")
                        .HasComment("Receiver player profile identifier");

                    b.Property<int>("SenderProfileId")
                        .HasColumnType("int")
                        .HasComment("Sender player profile identifier");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the message was sent");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Message title");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverProfileId");

                    b.HasIndex("SenderProfileId");

                    b.ToTable("Messages", (string)null);

                    b.HasComment("Message entity class");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Tournament identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasComment("Current tournament's club identifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Deleted on date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Tournament description");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2")
                        .HasComment("Tournament end date and time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("IsDeleted the record deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Tournament name");

                    b.Property<int>("NumberOfPlayersAllowed")
                        .HasColumnType("int")
                        .HasComment("Number of allowed players to join the tournament");

                    b.Property<int>("PlayerLevelRangeFrom")
                        .HasColumnType("int")
                        .HasComment("Tournament players level range start from (including)");

                    b.Property<int>("PlayerLevelRangeTo")
                        .HasColumnType("int")
                        .HasComment("Tournament players level range end to (including)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2")
                        .HasComment("Tournament start date and time");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Tournaments", (string)null);

                    b.HasComment("Tournament entity class");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.TournamentGSMUPlayerProfile", b =>
                {
                    b.Property<int>("PlayerProfileId")
                        .HasColumnType("int")
                        .HasComment("Current player profile identifier");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int")
                        .HasComment("Current tournament identifier");

                    b.HasKey("PlayerProfileId", "TournamentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentsGSMUPlayerProfiles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "18906160-6956-4ecc-9b7c-fa5d0a4d0f82",
                            ConcurrencyStamp = "0101ce32-56cf-47c4-9112-883f30f57d7e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "757178e3-b3c9-4414-8dd6-a72196f2b6d5",
                            ConcurrencyStamp = "88aeac26-9101-4095-9a8a-390cff1ffd12",
                            Name = "ClubOwner",
                            NormalizedName = "CLUBOWNER"
                        },
                        new
                        {
                            Id = "cd40263e-6425-4dad-ada2-60e5813e5eb2",
                            ConcurrencyStamp = "26e56ab7-c624-4cba-a9e7-cf3314b45582",
                            Name = "GSMUUser",
                            NormalizedName = "GSMUUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "65a12477-a9c9-48f1-a844-0ec223e1bca5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e06c5d37-4d94-49ec-b69c-e6eca66cc574",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL58c4p4tLahuQOwbsPoQIhLcfFw3N6QI4Zlx3yEvf671Hg8k48cRNVTT63bDwAASQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "969b4e41-e7e3-414b-a0fc-400b817d6fe2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "82cd50ca-b023-42e5-8344-227d5c45877c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26de3351-08c9-4f7a-910f-f4b8b9787f85",
                            Email = "clubowner@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLUBOWNER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELzj6JaqTk5qWv9kF+8Xd1IIYoSb22WMTKEnVXL0ZJrGZfPUg/BwM3wTk1iCiGDlGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa5c329a-adb4-435d-9f26-82d533abb368",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "83544abd-e9e2-4592-ad5e-23cd2f63e5a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08069628-5845-469f-a0ed-bab5b3b7d696",
                            Email = "user@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH7c4Wy2Hx04tAFXrL2tfAJLbfCNj0+vRvldy42qO2UU3wf9b+F0YRImoqAjQLpYYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0de0bada-f7c3-4dfa-8af3-5c2f54ecb7f5",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "65a12477-a9c9-48f1-a844-0ec223e1bca5",
                            RoleId = "18906160-6956-4ecc-9b7c-fa5d0a4d0f82"
                        },
                        new
                        {
                            UserId = "82cd50ca-b023-42e5-8344-227d5c45877c",
                            RoleId = "757178e3-b3c9-4414-8dd6-a72196f2b6d5"
                        },
                        new
                        {
                            UserId = "83544abd-e9e2-4592-ad5e-23cd2f63e5a0",
                            RoleId = "cd40263e-6425-4dad-ada2-60e5813e5eb2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Booking", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSetBook.Infrastructure.Models.Court", "Court")
                        .WithMany("Bookings")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.City", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Club", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.City", "City")
                        .WithMany("Clubs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "ClubOwner")
                        .WithMany()
                        .HasForeignKey("ClubOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("ClubOwner");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.ClubReview", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.Club", "Club")
                        .WithMany("ClubReviews")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Court", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.Club", "Club")
                        .WithMany("Courts")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.GameSetMatchUpPlayerProfile", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.City", "City")
                        .WithMany("Profiles")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Message", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.GameSetMatchUpPlayerProfile", "ReceiverProfile")
                        .WithMany()
                        .HasForeignKey("ReceiverProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSetBook.Infrastructure.Models.GameSetMatchUpPlayerProfile", "SenderProfile")
                        .WithMany("Messages")
                        .HasForeignKey("SenderProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReceiverProfile");

                    b.Navigation("SenderProfile");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Tournament", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.TournamentGSMUPlayerProfile", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.GameSetMatchUpPlayerProfile", "PlayerProile")
                        .WithMany("TournamentsGSMUPlayerProfile")
                        .HasForeignKey("PlayerProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GameSetBook.Infrastructure.Models.Tournament", "Tournament")
                        .WithMany("TournamentGSMUPlayerProfiles")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlayerProile");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.City", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Club", b =>
                {
                    b.Navigation("ClubReviews");

                    b.Navigation("Courts");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Court", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.GameSetMatchUpPlayerProfile", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("TournamentsGSMUPlayerProfile");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Tournament", b =>
                {
                    b.Navigation("TournamentGSMUPlayerProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
