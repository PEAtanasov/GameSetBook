// <auto-generated />
using System;
using GameSetBook.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameSetBook.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240416161917_addedLogoUrlsToTheClubsAndImageFilesInwwwroot")]
    partial class addedLogoUrlsToTheClubsAndImageFilesInwwwroot
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Booking identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BookedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time booking is created");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the booking");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Client identifier");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Client's name");

                    b.Property<int>("CourtId")
                        .HasColumnType("int")
                        .HasComment("Court identifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Deleted on date and time");

                    b.Property<int>("Hour")
                        .HasColumnType("int")
                        .HasComment("Hour of the booking");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("is the the booking available");

                    b.Property<bool>("IsBookedByOwnerOrAdmin")
                        .HasColumnType("bit")
                        .HasComment("Is the booking created by administrator or club owner");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("is the booking canceled");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Client's phone number");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Booking price");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CourtId");

                    b.ToTable("Bookings");

                    b.HasComment("Booking entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookedOn = new DateTime(2024, 3, 9, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 3, 14, 17, 9, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "83544abd-e9e2-4592-ad5e-23cd2f63e5a0",
                            ClientName = "Encho georgiev",
                            CourtId = 1,
                            Hour = 17,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "2222222222",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = 2,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "f011047b-9d4a-4cb6-8125-56fcd52a572e",
                            ClientName = "Petar Petrov",
                            CourtId = 3,
                            Hour = 10,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "111111",
                            Price = 30m
                        },
                        new
                        {
                            Id = 3,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "f011047b-9d4a-4cb6-8125-56fcd52a572e",
                            ClientName = "Petar Petrov",
                            CourtId = 3,
                            Hour = 11,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "111111",
                            Price = 30m
                        },
                        new
                        {
                            Id = 4,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 21, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "be5f9238-069b-441f-b920-3464ab6ffc21",
                            ClientName = "Georgi Georgiev",
                            CourtId = 4,
                            Hour = 10,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "222222",
                            Price = 35m
                        },
                        new
                        {
                            Id = 5,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 21, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "be5f9238-069b-441f-b920-3464ab6ffc21",
                            ClientName = "Georgi Georgiev",
                            CourtId = 4,
                            Hour = 11,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "222222",
                            Price = 35m
                        },
                        new
                        {
                            Id = 6,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "09ff5c8e-811b-404d-bf52-545f1100b31b",
                            ClientName = "Atanas Atanasov",
                            CourtId = 5,
                            Hour = 10,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "333333",
                            Price = 35m
                        },
                        new
                        {
                            Id = 7,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 21, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "09ff5c8e-811b-404d-bf52-545f1100b31b",
                            ClientName = "Atanas Atanasov",
                            CourtId = 5,
                            Hour = 11,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "333333",
                            Price = 35m
                        },
                        new
                        {
                            Id = 8,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "09ff5c8e-811b-404d-bf52-545f1100b31b",
                            ClientName = "Atanas Atanasov",
                            CourtId = 6,
                            Hour = 10,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "333333",
                            Price = 45m
                        },
                        new
                        {
                            Id = 9,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 21, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "09ff5c8e-811b-404d-bf52-545f1100b31b",
                            ClientName = "Atanas Atanasov",
                            CourtId = 6,
                            Hour = 11,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "333333",
                            Price = 45m
                        },
                        new
                        {
                            Id = 10,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "33104877-4d79-4194-b09a-9e75f1790ceb",
                            ClientName = "Natalia Atanasova",
                            CourtId = 7,
                            Hour = 10,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "333333",
                            Price = 30m
                        },
                        new
                        {
                            Id = 11,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 21, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "33104877-4d79-4194-b09a-9e75f1790ceb",
                            ClientName = "Natalia Atanasova",
                            CourtId = 7,
                            Hour = 11,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "333333",
                            Price = 30m
                        },
                        new
                        {
                            Id = 12,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 21, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "f011047b-9d4a-4cb6-8125-56fcd52a572e",
                            ClientName = "Petar Petrov",
                            CourtId = 3,
                            DeletedOn = new DateTime(2024, 4, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Hour = 10,
                            IsAvailable = true,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = true,
                            PhoneNumber = "111111",
                            Price = 30m
                        },
                        new
                        {
                            Id = 13,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "f011047b-9d4a-4cb6-8125-56fcd52a572e",
                            ClientName = "Petar Petrov",
                            CourtId = 3,
                            DeletedOn = new DateTime(2024, 4, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Hour = 11,
                            IsAvailable = true,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = true,
                            PhoneNumber = "111111",
                            Price = 30m
                        },
                        new
                        {
                            Id = 14,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "f011047b-9d4a-4cb6-8125-56fcd52a572e",
                            ClientName = "Petar Petrov",
                            CourtId = 3,
                            Hour = 13,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "111111",
                            Price = 30m
                        },
                        new
                        {
                            Id = 15,
                            BookedOn = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingDate = new DateTime(2024, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = "f011047b-9d4a-4cb6-8125-56fcd52a572e",
                            ClientName = "Petar Petrov",
                            CourtId = 3,
                            Hour = 14,
                            IsAvailable = false,
                            IsBookedByOwnerOrAdmin = false,
                            IsDeleted = false,
                            PhoneNumber = "111111",
                            Price = 30m
                        });
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("City identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasComment("Country identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("City name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasComment("City entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Kavarna"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Name = "Bucharest"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            Name = "Constanta"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 3,
                            Name = "Athens"
                        });
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Club identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Address of the club");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasComment("Club's city identifier");

                    b.Property<string>("ClubOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Club owner's identifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Deleted on date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Club description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Club's email");

                    b.Property<bool>("HasParking")
                        .HasColumnType("bit")
                        .HasComment("Is car parking for clients available");

                    b.Property<bool>("HasShop")
                        .HasColumnType("bit")
                        .HasComment("Is tennis shop available");

                    b.Property<bool>("HasShower")
                        .HasColumnType("bit")
                        .HasComment("Is shower for clients available");

                    b.Property<bool>("IsAproovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Is the club aprooved from app admin");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("IsDeleted the record deleted");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComment("Club's logo Url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Club name");

                    b.Property<int?>("NumberOfCoaches")
                        .HasColumnType("int")
                        .HasComment("Number of coaches in the club");

                    b.Property<int>("NumberOfCourts")
                        .HasColumnType("int")
                        .HasComment("Numbber of courts in the club");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Club's phone number");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the club has been created");

                    b.Property<int>("WorkingTimeEnd")
                        .HasColumnType("int")
                        .HasComment("Club working time end");

                    b.Property<int>("WorkingTimeStart")
                        .HasColumnType("int")
                        .HasComment("Club working time start");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClubOwnerId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clubs");

                    b.HasComment("Club entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "First Club Address",
                            CityId = 1,
                            ClubOwnerId = "82cd50ca-b023-42e5-8344-227d5c45877c",
                            Description = "First Club Description",
                            Email = "firstClub@mail.com",
                            HasParking = true,
                            HasShop = true,
                            HasShower = true,
                            IsAproovedByAdmin = true,
                            IsDeleted = false,
                            LogoUrl = "images/club_logo/default_club_logo.png",
                            Name = "First Club",
                            NumberOfCoaches = 2,
                            NumberOfCourts = 2,
                            PhoneNumber = "+359123456",
                            RegisteredOn = new DateTime(2024, 9, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 20,
                            WorkingTimeStart = 8
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address 0",
                            CityId = 1,
                            ClubOwnerId = "53f6a3e4-df3b-4810-8ba0-83b9a57a379e",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur venenatis quam purus, id lobortis purus efficitur eget. Cras sed dui a dui finibus condimentum. Quisque ut erat ut orci bibendum tincidunt. Aenean malesuada, augue nec facilisis porttitor, ante massa dignissim sapien, quis vulputate nisi magna id justo. Nunc placerat est ac viverra fringilla. Vestibulum mattis arcu nec lacus tempus, et ultricies nisi luctus. Ut semper scelerisque libero nec pellentesque. Aliquam commodo imperdiet felis, at eleifend diam eleifend porttitor. Cras lacus mi, tempus vitae consectetur ut, dapibus id quam. Aenean a finibus dolor, gravida euismod mauris. Quisque aliquet auctor turpis eu maximus. Duis feugiat augue vel faucibus venenatis.\r\n\r\nInteger nisl metus, aliquet et vulputate sit amet, hendrerit eget nulla. Vestibulum non convallis augue. Aenean ut egestas lacus. Sed pulvinar purus neque, at maximus nisi efficitur et. Etiam sed magna a felis rutrum lacinia a vel tortor. Class aptent taciti eu.",
                            Email = "club1@example.com",
                            HasParking = true,
                            HasShop = true,
                            HasShower = true,
                            IsAproovedByAdmin = true,
                            IsDeleted = false,
                            LogoUrl = "images/club_logo/TC_Sofia_logo.jpg",
                            Name = "TC Sofia",
                            NumberOfCoaches = 2,
                            NumberOfCourts = 4,
                            PhoneNumber = "00000001",
                            RegisteredOn = new DateTime(2024, 1, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 21,
                            WorkingTimeStart = 8
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address 1",
                            CityId = 1,
                            ClubOwnerId = "3a9b86c8-1c51-4990-aafa-6c527abef86e",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur venenatis quam purus, id lobortis purus efficitur eget. Cras sed dui a dui finibus condimentum. Quisque ut erat ut orci bibendum tincidunt. Aenean malesuada, augue nec facilisis porttitor, ante massa dignissim sapien, quis vulputate nisi magna id justo. Nunc placerat est ac viverra fringilla. Vestibulum mattis arcu nec lacus tempus, et ultricies nisi luctus. Ut semper scelerisque libero nec pellentesque. Aliquam commodo imperdiet felis, at eleifend diam eleifend porttitor. Cras lacus mi, tempus vitae consectetur ut, dapibus id quam. Aenean a finibus dolor, gravida euismod mauris. Quisque aliquet auctor turpis eu maximus. Duis feugiat augue vel faucibus venenatis.\r\n\r\nInteger nisl metus, aliquet et vulputate sit amet, hendrerit eget nulla. Vestibulum non convallis augue. Aenean ut egestas lacus. Sed pulvinar purus neque, at maximus nisi efficitur et. Etiam sed magna a felis rutrum lacinia a vel tortor. Class aptent taciti eu.",
                            Email = "club2@example.com",
                            HasParking = true,
                            HasShop = false,
                            HasShower = true,
                            IsAproovedByAdmin = true,
                            IsDeleted = false,
                            LogoUrl = "images/club_logo/Forehand_TC_logo.jpg",
                            Name = "Forehand TC",
                            NumberOfCoaches = 2,
                            NumberOfCourts = 3,
                            PhoneNumber = "+35988800002",
                            RegisteredOn = new DateTime(2024, 2, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 20,
                            WorkingTimeStart = 7
                        },
                        new
                        {
                            Id = 4,
                            Address = "Address 2",
                            CityId = 1,
                            ClubOwnerId = "78d95aa6-e1b2-499e-8b93-6dabcfdbc409",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur venenatis quam purus, id lobortis purus efficitur eget. Cras sed dui a dui finibus condimentum. Quisque ut erat ut orci bibendum tincidunt. Aenean malesuada, augue nec facilisis porttitor, ante massa dignissim sapien, quis vulputate nisi magna id justo. Nunc placerat est ac viverra fringilla. Vestibulum mattis arcu nec lacus tempus, et ultricies nisi luctus. Ut semper scelerisque libero nec pellentesque. Aliquam commodo imperdiet felis, at eleifend diam eleifend porttitor. Cras lacus mi, tempus vitae consectetur ut, dapibus id quam. Aenean a finibus dolor, gravida euismod mauris. Quisque aliquet auctor turpis eu maximus. Duis feugiat augue vel faucibus venenatis.\r\n\r\nInteger nisl metus, aliquet et vulputate sit amet, hendrerit eget nulla. Vestibulum non convallis augue. Aenean ut egestas lacus. Sed pulvinar purus neque, at maximus nisi efficitur et. Etiam sed magna a felis rutrum lacinia a vel tortor. Class aptent taciti eu.",
                            Email = "club2@example.com",
                            HasParking = true,
                            HasShop = false,
                            HasShower = true,
                            IsAproovedByAdmin = true,
                            IsDeleted = false,
                            LogoUrl = "images/club_logo/6-0_Sofia_logo.jpg",
                            Name = "6-0 Sofia",
                            NumberOfCoaches = 1,
                            NumberOfCourts = 2,
                            PhoneNumber = "+35988800003",
                            RegisteredOn = new DateTime(2024, 3, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 23,
                            WorkingTimeStart = 7
                        },
                        new
                        {
                            Id = 5,
                            Address = "Address 3",
                            CityId = 2,
                            ClubOwnerId = "af0e6295-932f-4d03-b243-874cd538aa4b",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur venenatis quam purus, id lobortis purus efficitur eget. Cras sed dui a dui finibus condimentum. Quisque ut erat ut orci bibendum tincidunt. Aenean malesuada, augue nec facilisis porttitor, ante massa dignissim sapien, quis vulputate nisi magna id justo. Nunc placerat est ac viverra fringilla. Vestibulum mattis arcu nec lacus tempus, et ultricies nisi luctus. Ut semper scelerisque libero nec pellentesque. Aliquam commodo imperdiet felis, at eleifend diam eleifend porttitor. Cras lacus mi, tempus vitae consectetur ut, dapibus id quam. Aenean a finibus dolor, gravida euismod mauris. Quisque aliquet auctor turpis eu maximus. Duis feugiat augue vel faucibus venenatis.\r\n\r\nInteger nisl metus, aliquet et vulputate sit amet, hendrerit eget nulla. Vestibulum non convallis augue. Aenean ut egestas lacus. Sed pulvinar purus neque, at maximus nisi efficitur et. Etiam sed magna a felis rutrum lacinia a vel tortor. Class aptent taciti eu.",
                            Email = "club3@example.com",
                            HasParking = true,
                            HasShop = true,
                            HasShower = false,
                            IsAproovedByAdmin = true,
                            IsDeleted = false,
                            LogoUrl = "images/club_logo/Match_Point_logo.jpg",
                            Name = "Match Point",
                            NumberOfCoaches = 2,
                            NumberOfCourts = 3,
                            PhoneNumber = "+35988800004",
                            RegisteredOn = new DateTime(2024, 4, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 20,
                            WorkingTimeStart = 7
                        },
                        new
                        {
                            Id = 6,
                            Address = "Address 4",
                            CityId = 2,
                            ClubOwnerId = "4be73c85-8e2c-4553-8b17-5352c2a9d11f",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur venenatis quam purus, id lobortis purus efficitur eget. Cras sed dui a dui finibus condimentum. Quisque ut erat ut orci bibendum tincidunt. Aenean malesuada, augue nec facilisis porttitor, ante massa dignissim sapien, quis vulputate nisi magna id justo. Nunc placerat est ac viverra fringilla. Vestibulum mattis arcu nec lacus tempus, et ultricies nisi luctus. Ut semper scelerisque libero nec pellentesque. Aliquam commodo imperdiet felis, at eleifend diam eleifend porttitor. Cras lacus mi, tempus vitae consectetur ut, dapibus id quam. Aenean a finibus dolor, gravida euismod mauris. Quisque aliquet auctor turpis eu maximus. Duis feugiat augue vel faucibus venenatis.\r\n\r\nInteger nisl metus, aliquet et vulputate sit amet, hendrerit eget nulla. Vestibulum non convallis augue. Aenean ut egestas lacus. Sed pulvinar purus neque, at maximus nisi efficitur et. Etiam sed magna a felis rutrum lacinia a vel tortor. Class aptent taciti eu.",
                            Email = "club4@example.com",
                            HasParking = false,
                            HasShop = true,
                            HasShower = true,
                            IsAproovedByAdmin = true,
                            IsDeleted = false,
                            LogoUrl = "images/club_logo/TC_Ace_Varna_logo.jpg",
                            Name = "TC Ace Varna",
                            NumberOfCoaches = 2,
                            NumberOfCourts = 2,
                            PhoneNumber = "+35988800005",
                            RegisteredOn = new DateTime(2024, 1, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 22,
                            WorkingTimeStart = 8
                        },
                        new
                        {
                            Id = 7,
                            Address = "Address 5",
                            CityId = 3,
                            ClubOwnerId = "5813a55d-7cc0-4441-b5ed-27207a753a6d",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur venenatis quam purus, id lobortis purus efficitur eget. Cras sed dui a dui finibus condimentum. Quisque ut erat ut orci bibendum tincidunt. Aenean malesuada, augue nec facilisis porttitor, ante massa dignissim sapien, quis vulputate nisi magna id justo. Nunc placerat est ac viverra fringilla. Vestibulum mattis arcu nec lacus tempus, et ultricies nisi luctus. Ut semper scelerisque libero nec pellentesque. Aliquam commodo imperdiet felis, at eleifend diam eleifend porttitor. Cras lacus mi, tempus vitae consectetur ut, dapibus id quam. Aenean a finibus dolor, gravida euismod mauris. Quisque aliquet auctor turpis eu maximus. Duis feugiat augue vel faucibus venenatis.\r\n\r\nInteger nisl metus, aliquet et vulputate sit amet, hendrerit eget nulla. Vestibulum non convallis augue. Aenean ut egestas lacus. Sed pulvinar purus neque, at maximus nisi efficitur et. Etiam sed magna a felis rutrum lacinia a vel tortor. Class aptent taciti eu.",
                            Email = "club5@example.com",
                            HasParking = true,
                            HasShop = true,
                            HasShower = true,
                            IsAproovedByAdmin = true,
                            IsDeleted = false,
                            LogoUrl = "images/club_logo/BlackSeaRama_TC_logo.png",
                            Name = "BlackSeaRama TC",
                            NumberOfCoaches = 2,
                            NumberOfCourts = 2,
                            PhoneNumber = "+35988800006",
                            RegisteredOn = new DateTime(2011, 5, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 21,
                            WorkingTimeStart = 7
                        },
                        new
                        {
                            Id = 8,
                            Address = "Address 6",
                            CityId = 4,
                            ClubOwnerId = "1c3c37d5-2189-4d71-96b5-27c0da3abde7",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur venenatis quam purus, id lobortis purus efficitur eget. Cras sed dui a dui finibus condimentum. Quisque ut erat ut orci bibendum tincidunt. Aenean malesuada, augue nec facilisis porttitor, ante massa dignissim sapien, quis vulputate nisi magna id justo. Nunc placerat est ac viverra fringilla. Vestibulum mattis arcu nec lacus tempus, et ultricies nisi luctus. Ut semper scelerisque libero nec pellentesque. Aliquam commodo imperdiet felis, at eleifend diam eleifend porttitor. Cras lacus mi, tempus vitae consectetur ut, dapibus id quam. Aenean a finibus dolor, gravida euismod mauris. Quisque aliquet auctor turpis eu maximus. Duis feugiat augue vel faucibus venenatis.\r\n\r\nInteger nisl metus, aliquet et vulputate sit amet, hendrerit eget nulla. Vestibulum non convallis augue. Aenean ut egestas lacus. Sed pulvinar purus neque, at maximus nisi efficitur et. Etiam sed magna a felis rutrum lacinia a vel tortor. Class aptent taciti eu.",
                            Email = "club6@example.com",
                            HasParking = true,
                            HasShop = true,
                            HasShower = true,
                            IsAproovedByAdmin = true,
                            IsDeleted = false,
                            LogoUrl = "images/club_logo/Number_One_logo.jpg",
                            Name = "Number One",
                            NumberOfCoaches = 3,
                            NumberOfCourts = 3,
                            PhoneNumber = "+35988800007",
                            RegisteredOn = new DateTime(2023, 12, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 23,
                            WorkingTimeStart = 7
                        },
                        new
                        {
                            Id = 9,
                            Address = "Address 7",
                            CityId = 4,
                            ClubOwnerId = "0e0103e9-2f94-49de-8012-eba340f8e4cf",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur venenatis quam purus, id lobortis purus efficitur eget. Cras sed dui a dui finibus condimentum. Quisque ut erat ut orci bibendum tincidunt. Aenean malesuada, augue nec facilisis porttitor, ante massa dignissim sapien, quis vulputate nisi magna id justo. Nunc placerat est ac viverra fringilla. Vestibulum mattis arcu nec lacus tempus, et ultricies nisi luctus. Ut semper scelerisque libero nec pellentesque. Aliquam commodo imperdiet felis, at eleifend diam eleifend porttitor. Cras lacus mi, tempus vitae consectetur ut, dapibus id quam. Aenean a finibus dolor, gravida euismod mauris. Quisque aliquet auctor turpis eu maximus. Duis feugiat augue vel faucibus venenatis.\r\n\r\nInteger nisl metus, aliquet et vulputate sit amet, hendrerit eget nulla. Vestibulum non convallis augue. Aenean ut egestas lacus. Sed pulvinar purus neque, at maximus nisi efficitur et. Etiam sed magna a felis rutrum lacinia a vel tortor. Class aptent taciti eu.",
                            Email = "club7@example.com",
                            HasParking = true,
                            HasShop = true,
                            HasShower = true,
                            IsAproovedByAdmin = true,
                            IsDeleted = false,
                            LogoUrl = "images/club_logo/TC_Simona_Halep_logo.jpg",
                            Name = "TC Simona Halep",
                            NumberOfCoaches = 2,
                            NumberOfCourts = 2,
                            PhoneNumber = "+35988800008",
                            RegisteredOn = new DateTime(2023, 3, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 22,
                            WorkingTimeStart = 8
                        },
                        new
                        {
                            Id = 10,
                            Address = "Address 8",
                            CityId = 5,
                            ClubOwnerId = "d7fc7550-ed8f-4a86-acde-65c54168e949",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur venenatis quam purus, id lobortis purus efficitur eget. Cras sed dui a dui finibus condimentum. Quisque ut erat ut orci bibendum tincidunt. Aenean malesuada, augue nec facilisis porttitor, ante massa dignissim sapien, quis vulputate nisi magna id justo. Nunc placerat est ac viverra fringilla. Vestibulum mattis arcu nec lacus tempus, et ultricies nisi luctus. Ut semper scelerisque libero nec pellentesque. Aliquam commodo imperdiet felis, at eleifend diam eleifend porttitor. Cras lacus mi, tempus vitae consectetur ut, dapibus id quam. Aenean a finibus dolor, gravida euismod mauris. Quisque aliquet auctor turpis eu maximus. Duis feugiat augue vel faucibus venenatis.\r\n\r\nInteger nisl metus, aliquet et vulputate sit amet, hendrerit eget nulla. Vestibulum non convallis augue. Aenean ut egestas lacus. Sed pulvinar purus neque, at maximus nisi efficitur et. Etiam sed magna a felis rutrum lacinia a vel tortor. Class aptent taciti eu.",
                            Email = "club8@example.com",
                            HasParking = true,
                            HasShop = true,
                            HasShower = false,
                            IsAproovedByAdmin = true,
                            IsDeleted = false,
                            LogoUrl = "images/club_logo/Winner_TC_logo.jpg",
                            Name = "Winner TC",
                            NumberOfCoaches = 1,
                            NumberOfCourts = 2,
                            PhoneNumber = "+35988800009",
                            RegisteredOn = new DateTime(2023, 4, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 20,
                            WorkingTimeStart = 7
                        },
                        new
                        {
                            Id = 11,
                            Address = "Address 10",
                            CityId = 6,
                            ClubOwnerId = "df044ba7-d51f-491d-8663-9ee9ddc57fb0",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur venenatis quam purus, id lobortis purus efficitur eget. Cras sed dui a dui finibus condimentum. Quisque ut erat ut orci bibendum tincidunt. Aenean malesuada, augue nec facilisis porttitor, ante massa dignissim sapien, quis vulputate nisi magna id justo. Nunc placerat est ac viverra fringilla. Vestibulum mattis arcu nec lacus tempus, et ultricies nisi luctus. Ut semper scelerisque libero nec pellentesque. Aliquam commodo imperdiet felis, at eleifend diam eleifend porttitor. Cras lacus mi, tempus vitae consectetur ut, dapibus id quam. Aenean a finibus dolor, gravida euismod mauris. Quisque aliquet auctor turpis eu maximus. Duis feugiat augue vel faucibus venenatis.\r\n\r\nInteger nisl metus, aliquet et vulputate sit amet, hendrerit eget nulla. Vestibulum non convallis augue. Aenean ut egestas lacus. Sed pulvinar purus neque, at maximus nisi efficitur et. Etiam sed magna a felis rutrum lacinia a vel tortor. Class aptent taciti eu.",
                            Email = "club10@example.com",
                            HasParking = true,
                            HasShop = true,
                            HasShower = true,
                            IsAproovedByAdmin = true,
                            IsDeleted = false,
                            LogoUrl = "images/club_logo/Zeus_TC_logo.jpg",
                            Name = "Zeus TC",
                            NumberOfCoaches = 2,
                            NumberOfCourts = 2,
                            PhoneNumber = "+35988800010",
                            RegisteredOn = new DateTime(2023, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 21,
                            WorkingTimeStart = 8
                        },
                        new
                        {
                            Id = 12,
                            Address = "Address 101",
                            CityId = 1,
                            ClubOwnerId = "b49cdbae-fe47-4f91-82b2-746025d31476",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur venenatis quam purus, id lobortis purus efficitur eget. Cras sed dui a dui finibus condimentum. Quisque ut erat ut orci bibendum tincidunt. Aenean malesuada, augue nec facilisis porttitor, ante massa dignissim sapien, quis vulputate nisi magna id justo. Nunc placerat est ac viverra fringilla. Vestibulum mattis arcu nec lacus tempus, et ultricies nisi luctus. Ut semper scelerisque libero nec pellentesque. Aliquam commodo imperdiet felis, at eleifend diam eleifend porttitor. Cras lacus mi, tempus vitae consectetur ut, dapibus id quam. Aenean a finibus dolor, gravida euismod mauris. Quisque aliquet auctor turpis eu maximus. Duis feugiat augue vel faucibus venenatis.\r\n\r\nInteger nisl metus, aliquet et vulputate sit amet, hendrerit eget nulla. Vestibulum non convallis augue. Aenean ut egestas lacus. Sed pulvinar purus neque, at maximus nisi efficitur et. Etiam sed magna a felis rutrum lacinia a vel tortor. Class aptent taciti eu.",
                            Email = "club11@example.com",
                            HasParking = true,
                            HasShop = true,
                            HasShower = true,
                            IsAproovedByAdmin = false,
                            IsDeleted = false,
                            LogoUrl = "images/club_logo/Top_Tennis_logo.jpg",
                            Name = "Top Tennis",
                            NumberOfCoaches = 2,
                            NumberOfCourts = 2,
                            PhoneNumber = "+35988800011",
                            RegisteredOn = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeEnd = 21,
                            WorkingTimeStart = 8
                        });
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Country identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)")
                        .HasComment("Country name");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasComment("Country entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Greece"
                        });
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Court identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasComment("Club identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Is the court enable");

                    b.Property<bool>("IsIndoor")
                        .HasColumnType("bit")
                        .HasComment("Is the court indoor");

                    b.Property<bool>("IsLighted")
                        .HasColumnType("bit")
                        .HasComment("Is the court lighted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Court name");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price for renting court per one hour");

                    b.Property<int>("Surface")
                        .HasColumnType("int")
                        .HasComment("Court surface");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Courts");

                    b.HasComment("Court entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClubId = 1,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = false,
                            Name = "No.1",
                            PricePerHour = 20m,
                            Surface = 3
                        },
                        new
                        {
                            Id = 2,
                            ClubId = 1,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = false,
                            Name = "No.2",
                            PricePerHour = 20m,
                            Surface = 2
                        },
                        new
                        {
                            Id = 3,
                            ClubId = 2,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = false,
                            Name = "No1",
                            PricePerHour = 30m,
                            Surface = 3
                        },
                        new
                        {
                            Id = 4,
                            ClubId = 2,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "No2",
                            PricePerHour = 35m,
                            Surface = 3
                        },
                        new
                        {
                            Id = 5,
                            ClubId = 2,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "No3",
                            PricePerHour = 35m,
                            Surface = 3
                        },
                        new
                        {
                            Id = 6,
                            ClubId = 2,
                            IsActive = true,
                            IsIndoor = true,
                            IsLighted = true,
                            Name = "No4",
                            PricePerHour = 45m,
                            Surface = 4
                        },
                        new
                        {
                            Id = 7,
                            ClubId = 3,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Court 1",
                            PricePerHour = 30m,
                            Surface = 2
                        },
                        new
                        {
                            Id = 8,
                            ClubId = 3,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Court 2",
                            PricePerHour = 30m,
                            Surface = 2
                        },
                        new
                        {
                            Id = 9,
                            ClubId = 3,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Court 3",
                            PricePerHour = 40m,
                            Surface = 2
                        },
                        new
                        {
                            Id = 10,
                            ClubId = 4,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Number 1",
                            PricePerHour = 35m,
                            Surface = 1
                        },
                        new
                        {
                            Id = 11,
                            ClubId = 4,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Number 2",
                            PricePerHour = 35m,
                            Surface = 1
                        },
                        new
                        {
                            Id = 12,
                            ClubId = 5,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "First",
                            PricePerHour = 35m,
                            Surface = 3
                        },
                        new
                        {
                            Id = 13,
                            ClubId = 5,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Second",
                            PricePerHour = 35m,
                            Surface = 3
                        },
                        new
                        {
                            Id = 14,
                            ClubId = 5,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Third",
                            PricePerHour = 40m,
                            Surface = 2
                        },
                        new
                        {
                            Id = 15,
                            ClubId = 6,
                            IsActive = true,
                            IsIndoor = true,
                            IsLighted = true,
                            Name = "No 1",
                            PricePerHour = 40m,
                            Surface = 4
                        },
                        new
                        {
                            Id = 16,
                            ClubId = 6,
                            IsActive = true,
                            IsIndoor = true,
                            IsLighted = true,
                            Name = "No 2",
                            PricePerHour = 40m,
                            Surface = 4
                        },
                        new
                        {
                            Id = 17,
                            ClubId = 7,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = false,
                            Name = "No1",
                            PricePerHour = 50m,
                            Surface = 2
                        },
                        new
                        {
                            Id = 18,
                            ClubId = 7,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = false,
                            Name = "No2",
                            PricePerHour = 50m,
                            Surface = 2
                        },
                        new
                        {
                            Id = 19,
                            ClubId = 8,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Court 1",
                            PricePerHour = 30m,
                            Surface = 3
                        },
                        new
                        {
                            Id = 20,
                            ClubId = 8,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Court 2",
                            PricePerHour = 30m,
                            Surface = 3
                        },
                        new
                        {
                            Id = 21,
                            ClubId = 8,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Court 3",
                            PricePerHour = 30m,
                            Surface = 3
                        },
                        new
                        {
                            Id = 22,
                            ClubId = 9,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Court 1",
                            PricePerHour = 30m,
                            Surface = 2
                        },
                        new
                        {
                            Id = 23,
                            ClubId = 9,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Court 2",
                            PricePerHour = 30m,
                            Surface = 2
                        },
                        new
                        {
                            Id = 24,
                            ClubId = 10,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Court No1",
                            PricePerHour = 35m,
                            Surface = 1
                        },
                        new
                        {
                            Id = 25,
                            ClubId = 10,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Court No2",
                            PricePerHour = 35m,
                            Surface = 1
                        },
                        new
                        {
                            Id = 26,
                            ClubId = 11,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Olymp 1",
                            PricePerHour = 60m,
                            Surface = 2
                        },
                        new
                        {
                            Id = 27,
                            ClubId = 11,
                            IsActive = true,
                            IsIndoor = false,
                            IsLighted = true,
                            Name = "Olymp 2",
                            PricePerHour = 60m,
                            Surface = 2
                        },
                        new
                        {
                            Id = 28,
                            ClubId = 12,
                            IsActive = false,
                            IsIndoor = false,
                            IsLighted = false,
                            Name = "1st",
                            PricePerHour = 20m,
                            Surface = 3
                        },
                        new
                        {
                            Id = 29,
                            ClubId = 12,
                            IsActive = false,
                            IsIndoor = false,
                            IsLighted = false,
                            Name = "2nd",
                            PricePerHour = 20m,
                            Surface = 3
                        });
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("User first name");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("User last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Extension of the identoty user");

                    b.HasData(
                        new
                        {
                            Id = "65a12477-a9c9-48f1-a844-0ec223e1bca5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a51e02c-b5fd-4200-8a19-4009ff139811",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            LastName = "Atanasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFP5r87j9/NAHNZs9I9EjoF2P8tOL7UiJRUDMOHuPpQs/GTTqYVKXAI7L8pkgxbkbg==",
                            PhoneNumber = "0000000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b1d04f1-c673-4502-a0ab-6a2f508ada83",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        },
                        new
                        {
                            Id = "82cd50ca-b023-42e5-8344-227d5c45877c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d998ce2-6788-406b-a318-9a8565547cb9",
                            Email = "clubowner@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Atanas",
                            LastName = "Atanasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLUBOWNER@MAIL.COM",
                            NormalizedUserName = "CLUBOWNER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKH1Do6RgeZBftvLBlgPr+HmV6YlQ+jCAFuPTLwL5l91fdgh8fKOH6Zyeg7p4JUeog==",
                            PhoneNumber = "1111111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5525c5f3-20b7-416d-82a0-e58de93d8038",
                            TwoFactorEnabled = false,
                            UserName = "clubowner@mail.com"
                        },
                        new
                        {
                            Id = "83544abd-e9e2-4592-ad5e-23cd2f63e5a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "435b5be7-5535-47a3-a29f-19edfb428758",
                            Email = "user@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Encho",
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@MAIL.COM",
                            NormalizedUserName = "USER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEONAJUp3bKll4Q6S41fulUsRhVEY7RAdONM+zJqS/sTiXyQhLRgjwLY0Yk4cwcJtfA==",
                            PhoneNumber = "2222222222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e69531f-f973-4485-acb1-6f62e4588498",
                            TwoFactorEnabled = false,
                            UserName = "user@mail.com"
                        },
                        new
                        {
                            Id = "f011047b-9d4a-4cb6-8125-56fcd52a572e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35944b5f-2718-4042-9e01-5b984e8f81f9",
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEHcjww1IngLYXBFRT/hUM7e99Xhtqs7TlFdPxaqjbFSTw/JJEHpoEOSsMML4LJThw==",
                            PhoneNumber = "111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19de0500-ea25-4ceb-a09f-b578a2830654",
                            TwoFactorEnabled = false,
                            UserName = "user1@example.com"
                        },
                        new
                        {
                            Id = "be5f9238-069b-441f-b920-3464ab6ffc21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bc784ab-3c4b-4ced-a0c4-4960fa76adc2",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            FirstName = "Georgi",
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGPRAMk5TcD8jO1swX0NT4GO4/iRtE15mp3Gvrb0quTfRvG2CD5aONI62PV09eipUw==",
                            PhoneNumber = "222222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2c988bf-44de-4795-8f66-5f94707ac676",
                            TwoFactorEnabled = false,
                            UserName = "user2@example.com"
                        },
                        new
                        {
                            Id = "09ff5c8e-811b-404d-bf52-545f1100b31b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa816e9f-fa63-4192-8c36-02ead5cba4cd",
                            Email = "user3@example.com",
                            EmailConfirmed = false,
                            FirstName = "Atanas",
                            LastName = "Atanasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBZSSJ17ViEvlNP8dUQnTJKvcIV0+UbxLJ5AhXGgrT6VY6EIQ7khwsJ7CU+hOLL9mg==",
                            PhoneNumber = "333333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c70f04f0-d3d6-4b90-b32e-2c8f501a2c75",
                            TwoFactorEnabled = false,
                            UserName = "user3@example.com"
                        },
                        new
                        {
                            Id = "33104877-4d79-4194-b09a-9e75f1790ceb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b2b19b5-1eee-4154-8b29-c16bff68c0d9",
                            Email = "user4@example.com",
                            EmailConfirmed = false,
                            FirstName = "Natalia",
                            LastName = "Atanasova",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIRN1SlBmmxBCuAZdQdE/hZq6aULge9OfxVF+tnLIo+pP/9D63syGkYue6PEGjAV3w==",
                            PhoneNumber = "444444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3382594b-1ac6-4aca-b3de-ce606ef48728",
                            TwoFactorEnabled = false,
                            UserName = "user4@example.com"
                        },
                        new
                        {
                            Id = "a3070a05-d72b-4f5d-b4da-ee8ca88cd6c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a4b4a2e-2e82-4994-af80-bb0249827c0e",
                            Email = "user5@example.com",
                            EmailConfirmed = false,
                            FirstName = "Gergana",
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPCgqlktVBkFsHw3+X4fNsvINNr/8HB8kxUC65aTcpUx/V1UWVDtCTabHklj7nAUmQ==",
                            PhoneNumber = "555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "740ea602-4f26-42db-aac9-4fd185af5f99",
                            TwoFactorEnabled = false,
                            UserName = "user5@example.com"
                        },
                        new
                        {
                            Id = "537897c6-0554-4ed4-9331-be3c7d8607af",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e040569-8246-432a-890e-cd6fb901a55a",
                            Email = "user6@example.com",
                            EmailConfirmed = false,
                            FirstName = "Plamen",
                            LastName = "Plamenov",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPk4UpUB78zMA8Y2UeoCASkT0F7O4aiZNhENqAMHLcBAtil8AMKz1X0gR9h9swJ9sw==",
                            PhoneNumber = "666666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1eda1597-c664-48bf-986d-c4e9abfa71bb",
                            TwoFactorEnabled = false,
                            UserName = "user6@example.com"
                        },
                        new
                        {
                            Id = "6449c49f-46d1-40ed-9ec1-da665101ec50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1bb620a-263f-4a90-9dfe-f6bd5126ae55",
                            Email = "user7@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nikolay",
                            LastName = "Velinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ8Q86LNFbu3/nPWddKd2gW2Cia2xUklk8Q+96AQLBb9boT7699kGmBI71xofmj4XQ==",
                            PhoneNumber = "777777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4efc8baa-d2e5-4bc8-b5a3-32eefc814190",
                            TwoFactorEnabled = false,
                            UserName = "user7@example.com"
                        },
                        new
                        {
                            Id = "c0bb387b-bfb2-48f0-895a-56394ae5c8c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0346292e-bde9-43bd-b132-1a44a1f39d9e",
                            Email = "user8@example.com",
                            EmailConfirmed = false,
                            FirstName = "Veselin",
                            LastName = "Hristov",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMqnR1sRcF38Z6SV7XjW/X90U1MvRWEh8cjh6gmdrtszfyaxfxKMDlWPsUdE3ts1IA==",
                            PhoneNumber = "888888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6163f77a-e4b1-49cc-b020-164fce476bc4",
                            TwoFactorEnabled = false,
                            UserName = "user8@example.com"
                        },
                        new
                        {
                            Id = "4377278c-69e2-4269-b1c3-7e688ef5dcd4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ce91d88-87e3-494f-93d6-de5287a30837",
                            Email = "user9@example.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            LastName = "Hristov",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDi4UbzZwbmUxa6jGbJmwIJ/q3PsFboBMO/RmhG8GMajPQPwf6yi7kJE6fFq58/VnA==",
                            PhoneNumber = "999999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00ef7de3-6be9-4cc2-8763-8779d145ca4f",
                            TwoFactorEnabled = false,
                            UserName = "user9@example.com"
                        },
                        new
                        {
                            Id = "e4193a92-3a49-41eb-8920-280bbec55eeb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97b4eb74-67cb-452d-9b3b-1ea4261c61f6",
                            Email = "user10@example.com",
                            EmailConfirmed = false,
                            FirstName = "Dara",
                            LastName = "Atanasova",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFRruhEW0l4bJPL8BXEEgD9FBHjqKvHG0c7ZwbdRg+ZOU7Wa3qeJyUzimZexpiJr7Q==",
                            PhoneNumber = "000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14ebdeba-0425-49ba-b6a7-9440f04b17fc",
                            TwoFactorEnabled = false,
                            UserName = "user10@example.com"
                        },
                        new
                        {
                            Id = "53f6a3e4-df3b-4810-8ba0-83b9a57a379e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "769a2552-5098-48c8-afbc-9198c022a9a7",
                            Email = "owner1@example.com",
                            EmailConfirmed = false,
                            FirstName = "owner1",
                            LastName = "owner1",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER1@EXAMPLE.COM",
                            NormalizedUserName = "OWNER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN/Ob5DmJgaUn5xVOCkM8QcfOcOZwHAoVuN4HvJmTm+vVvv5Tmlx/tA2hZjZJPwYrQ==",
                            PhoneNumber = "0000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f40c123e-88db-4995-b1df-292e95eaa035",
                            TwoFactorEnabled = false,
                            UserName = "owner1@example.com"
                        },
                        new
                        {
                            Id = "3a9b86c8-1c51-4990-aafa-6c527abef86e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c7e667e-b717-4ed9-a10b-003ba1a2a4c9",
                            Email = "owner2@example.com",
                            EmailConfirmed = false,
                            FirstName = "owner2",
                            LastName = "owner2",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER2@EXAMPLE.COM",
                            NormalizedUserName = "OWNER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGxSxuXSXhwRtpgT99+BtJ7AJotD1J05urD4Py93JuXO/HxXPabDAFDhq2ZaOBLuNQ==",
                            PhoneNumber = "1111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dadfa703-39da-4b42-995a-359004672ef2",
                            TwoFactorEnabled = false,
                            UserName = "owner2@example.com"
                        },
                        new
                        {
                            Id = "78d95aa6-e1b2-499e-8b93-6dabcfdbc409",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76e72847-a23f-48ca-9ca1-d15dfbf89f9e",
                            Email = "owner3@example.com",
                            EmailConfirmed = false,
                            FirstName = "owner3",
                            LastName = "owner3",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER3@EXAMPLE.COM",
                            NormalizedUserName = "OWNER3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIN2lUQtfu0am/HhjX7/ZaZbcqlO3mdseAK8nOW88B4Qt7RVQVjW6cfg+WZ/pqi05A==",
                            PhoneNumber = "2222222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ddb0dd5-02c9-416b-9168-612c7a76fa7e",
                            TwoFactorEnabled = false,
                            UserName = "owner3@example.com"
                        },
                        new
                        {
                            Id = "af0e6295-932f-4d03-b243-874cd538aa4b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aca79c5a-581e-4a6e-8498-3800917cc255",
                            Email = "owner4@example.com",
                            EmailConfirmed = false,
                            FirstName = "owner4",
                            LastName = "owner4",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER4@EXAMPLE.COM",
                            NormalizedUserName = "OWNER4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP4MBV+Eaceu6cM1iHr+AOXr6hDiPsT3coJrhYUOGLjQqmGZV32HU7j53420cGRRPw==",
                            PhoneNumber = "3333333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08f2b321-fe59-4266-8172-e5e1cf6f4a3b",
                            TwoFactorEnabled = false,
                            UserName = "owner4@example.com"
                        },
                        new
                        {
                            Id = "4be73c85-8e2c-4553-8b17-5352c2a9d11f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29198d9e-062c-4f78-86fd-fba31ebcd29f",
                            Email = "owner5@example.com",
                            EmailConfirmed = false,
                            FirstName = "owner5",
                            LastName = "owner5",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER5@EXAMPLE.COM",
                            NormalizedUserName = "OWNER5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMqscO6xEsLxns4+n4ien1y1bnuofmJakps1QuYHtYxoa09VOaXKNxOUhgw+AfgpAw==",
                            PhoneNumber = "4444444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88f32204-9224-4ed6-8900-8165e7bdf55e",
                            TwoFactorEnabled = false,
                            UserName = "owner5@example.com"
                        },
                        new
                        {
                            Id = "5813a55d-7cc0-4441-b5ed-27207a753a6d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16bc101c-8b7f-4e30-9408-385bbd9d9cea",
                            Email = "owner6@example.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            LastName = "Atanasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER6@EXAMPLE.COM",
                            NormalizedUserName = "OWNER6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHWnq07Gk8dasE1vbazmOyB5grazavnj+u69DCj31366RlczgXSJH1DEGdm5d0F1SQ==",
                            PhoneNumber = "5555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "711f5848-5d20-45a4-b327-81e1a06aa2f0",
                            TwoFactorEnabled = false,
                            UserName = "owner6@example.com"
                        },
                        new
                        {
                            Id = "1c3c37d5-2189-4d71-96b5-27c0da3abde7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b932fafa-7663-4451-a2b3-4bcfafe01e80",
                            Email = "owner7@example.com",
                            EmailConfirmed = false,
                            FirstName = "owner7",
                            LastName = "owner7",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER7@EXAMPLE.COM",
                            NormalizedUserName = "OWNER7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENWyWQ5Ln406BCu0uIKnIAvPD59N5R8x5kKVpPuncg0HV0/6LU/obFNEtkg+is1caA==",
                            PhoneNumber = "6666666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34e720b1-134f-41dd-b963-c006ad102458",
                            TwoFactorEnabled = false,
                            UserName = "owner7@example.com"
                        },
                        new
                        {
                            Id = "0e0103e9-2f94-49de-8012-eba340f8e4cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72536158-1306-4afa-9cb4-cb811eb5397d",
                            Email = "owner8@example.com",
                            EmailConfirmed = false,
                            FirstName = "owner8",
                            LastName = "owner8",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER8@EXAMPLE.COM",
                            NormalizedUserName = "OWNER8@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG4Q4dbQl7bKyKO5H3OnuAlHAvL4kuYZqWgOOyPbWoSFbReKRiHRccBraeiWb/7RRg==",
                            PhoneNumber = "7777777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d5d0f99-8fec-4f4b-9103-3a6e9107c2f0",
                            TwoFactorEnabled = false,
                            UserName = "owner8@example.com"
                        },
                        new
                        {
                            Id = "d7fc7550-ed8f-4a86-acde-65c54168e949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87fecafd-fc15-4cd0-8309-e8b756b9764b",
                            Email = "owner9@example.com",
                            EmailConfirmed = false,
                            FirstName = "owner9",
                            LastName = "owner9",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER9@EXAMPLE.COM",
                            NormalizedUserName = "OWNER9@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEObtCaDyGmFNebDB+47tC20XGM6nt19qTRvFE7I2OiF7QGSKSBIevamn7eeVgAferQ==",
                            PhoneNumber = "8888888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40f38abc-c782-4b4f-849a-698d7cb3e883",
                            TwoFactorEnabled = false,
                            UserName = "owner9@example.com"
                        },
                        new
                        {
                            Id = "df044ba7-d51f-491d-8663-9ee9ddc57fb0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94659d8a-90c1-4628-987e-0396aff3d230",
                            Email = "owner10@example.com",
                            EmailConfirmed = false,
                            FirstName = "owner10",
                            LastName = "owner10",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER10@EXAMPLE.COM",
                            NormalizedUserName = "OWNER10@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI6VlUKEcupdV59JLuuMz23X1FVL/qsfvJy5oeDVNl8j0guAqrtm03yFEQFyZrZMSQ==",
                            PhoneNumber = "9999999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38cf362a-4fba-4475-9629-d407b354df32",
                            TwoFactorEnabled = false,
                            UserName = "owner10@example.com"
                        },
                        new
                        {
                            Id = "b49cdbae-fe47-4f91-82b2-746025d31476",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d07ca2d-5da3-4119-a3e4-049b6e37ab62",
                            Email = "notapproved@example.com",
                            EmailConfirmed = false,
                            FirstName = "not Approved owner",
                            LastName = "not Approved owner",
                            LockoutEnabled = false,
                            NormalizedEmail = "NOTAPPROVED@EXAMPLE.COM",
                            NormalizedUserName = "NOTAPPROVED@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK6mc8wDf6MDT5RleZvgEBgFTyTzl1qzphrItGZM/G7QojlVp13ljwzD5rg7imsZEw==",
                            PhoneNumber = "99999991",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c11a9390-4af7-4404-8940-3774d19cb4d5",
                            TwoFactorEnabled = false,
                            UserName = "notapproved@example.com"
                        });
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Review identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasComment("Current review's booking identifier");

                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasComment("Current review's club identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date the reviews was added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Review description");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasComment("Review rating");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Current review's reviewer identifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Review title");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("ClubId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");

                    b.HasComment("Club's review entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingId = 2,
                            ClubId = 2,
                            CreatedOn = new DateTime(2023, 4, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The best cluib ever",
                            Rate = 10,
                            ReviewerId = "f011047b-9d4a-4cb6-8125-56fcd52a572e",
                            Title = "Super"
                        },
                        new
                        {
                            Id = 2,
                            BookingId = 3,
                            ClubId = 2,
                            CreatedOn = new DateTime(2023, 4, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The best cluib ever",
                            Rate = 9,
                            ReviewerId = "f011047b-9d4a-4cb6-8125-56fcd52a572e",
                            Title = "Well Done"
                        },
                        new
                        {
                            Id = 3,
                            BookingId = 14,
                            ClubId = 2,
                            CreatedOn = new DateTime(2023, 4, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The best cluib ever",
                            Rate = 9,
                            ReviewerId = "f011047b-9d4a-4cb6-8125-56fcd52a572e",
                            Title = "Super"
                        },
                        new
                        {
                            Id = 4,
                            BookingId = 15,
                            ClubId = 2,
                            CreatedOn = new DateTime(2023, 4, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The best cluib ever",
                            Rate = 7,
                            ReviewerId = "f011047b-9d4a-4cb6-8125-56fcd52a572e",
                            Title = "Well Done"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "18906160-6956-4ecc-9b7c-fa5d0a4d0f82",
                            ConcurrencyStamp = "3c0fb511-f02e-4653-9668-43e6ad7db45e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "757178e3-b3c9-4414-8dd6-a72196f2b6d5",
                            ConcurrencyStamp = "60e91b93-8f7b-47d2-ade5-9b37e36d5d95",
                            Name = "ClubOwner",
                            NormalizedName = "CLUBOWNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "65a12477-a9c9-48f1-a844-0ec223e1bca5",
                            RoleId = "18906160-6956-4ecc-9b7c-fa5d0a4d0f82"
                        },
                        new
                        {
                            UserId = "82cd50ca-b023-42e5-8344-227d5c45877c",
                            RoleId = "757178e3-b3c9-4414-8dd6-a72196f2b6d5"
                        },
                        new
                        {
                            UserId = "53f6a3e4-df3b-4810-8ba0-83b9a57a379e",
                            RoleId = "757178e3-b3c9-4414-8dd6-a72196f2b6d5"
                        },
                        new
                        {
                            UserId = "3a9b86c8-1c51-4990-aafa-6c527abef86e",
                            RoleId = "757178e3-b3c9-4414-8dd6-a72196f2b6d5"
                        },
                        new
                        {
                            UserId = "78d95aa6-e1b2-499e-8b93-6dabcfdbc409",
                            RoleId = "757178e3-b3c9-4414-8dd6-a72196f2b6d5"
                        },
                        new
                        {
                            UserId = "af0e6295-932f-4d03-b243-874cd538aa4b",
                            RoleId = "757178e3-b3c9-4414-8dd6-a72196f2b6d5"
                        },
                        new
                        {
                            UserId = "4be73c85-8e2c-4553-8b17-5352c2a9d11f",
                            RoleId = "757178e3-b3c9-4414-8dd6-a72196f2b6d5"
                        },
                        new
                        {
                            UserId = "5813a55d-7cc0-4441-b5ed-27207a753a6d",
                            RoleId = "757178e3-b3c9-4414-8dd6-a72196f2b6d5"
                        },
                        new
                        {
                            UserId = "1c3c37d5-2189-4d71-96b5-27c0da3abde7",
                            RoleId = "757178e3-b3c9-4414-8dd6-a72196f2b6d5"
                        },
                        new
                        {
                            UserId = "0e0103e9-2f94-49de-8012-eba340f8e4cf",
                            RoleId = "757178e3-b3c9-4414-8dd6-a72196f2b6d5"
                        },
                        new
                        {
                            UserId = "d7fc7550-ed8f-4a86-acde-65c54168e949",
                            RoleId = "757178e3-b3c9-4414-8dd6-a72196f2b6d5"
                        },
                        new
                        {
                            UserId = "df044ba7-d51f-491d-8663-9ee9ddc57fb0",
                            RoleId = "757178e3-b3c9-4414-8dd6-a72196f2b6d5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Booking", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.Identity.ApplicationUser", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSetBook.Infrastructure.Models.Court", "Court")
                        .WithMany("Bookings")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.City", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Club", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.City", "City")
                        .WithMany("Clubs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSetBook.Infrastructure.Models.Identity.ApplicationUser", "ClubOwner")
                        .WithOne("Club")
                        .HasForeignKey("GameSetBook.Infrastructure.Models.Club", "ClubOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("ClubOwner");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Court", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.Club", "Club")
                        .WithMany("Courts")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Review", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("GameSetBook.Infrastructure.Models.Review", "BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GameSetBook.Infrastructure.Models.Club", "Club")
                        .WithMany("Reviews")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GameSetBook.Infrastructure.Models.Identity.ApplicationUser", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Club");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSetBook.Infrastructure.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GameSetBook.Infrastructure.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Booking", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.City", b =>
                {
                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Club", b =>
                {
                    b.Navigation("Courts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Court", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("GameSetBook.Infrastructure.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Club");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
